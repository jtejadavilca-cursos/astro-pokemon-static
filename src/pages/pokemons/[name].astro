---
import type { GetStaticPaths } from "astro";
import Layout from "../../layouts/Layout.astro";
import type { PokemonListResponse } from "../../interfaces";

import PokemonCard from "@components/pokemons/PokemonCard.astro";
import Title from "@components/shared/Title.astro";
import { Icon } from 'astro-icon/components'

export const getStaticPaths = (async() => {

    const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
    const {results} = (await resp.json() as PokemonListResponse);

    return results.map(({ name, url }) => ({ params: { name }, props: { name, url } }));

}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;

const id = url.split("/").at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imgSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<Layout title={`Pokemon Static | #${id} - ${name}`} description={`Información del pokemón #${id} - ${name}`} image={imgSrc}>
    <section class="mt-10 mx-10 flex flex-col justify-center items-center">
        <div class="flex flex-row items-end">
            <div>
                <!-- <a href="/">Regresar</a> -->
                 <button
                    class="text-blue-500"
                    onclick="history.back()"
                 >Regresar</button>
                <Title>Pokemon: {name}</Title>
            </div>
    
            <button id="btn-favorite" class="ml-5" aria-label="Like" data-name={name} data-id={id}>
                <Icon data-fill class:list="hidden" name="heart-fill" size={50}/>
                <Icon data-outline name="heart-outline" size={50}/>
            </button>
        </div>

        <PokemonCard url={url} name={name} isBig />

        <audio controls>
            <source src={audioSrc} type="audio/ogg" />
            Your browser does not support the audio element.
        </audio>
    </section>
</Layout>


<script>
    interface FavoritePokemon {
        name: string;
        id: number;
    }

    const handlePageLoad = () => {
        let favoritePokemons: FavoritePokemon[] = JSON.parse(
            localStorage.getItem("favorites") || "[]"
        );

        const btnFavorite = document.querySelector("#btn-favorite") as HTMLButtonElement;

        if(!btnFavorite) return;

        const name = btnFavorite.dataset.name ?? '';
        const id = btnFavorite.dataset.id ?? '';

        const heartFill = btnFavorite.querySelector("[data-fill]") as HTMLElement;
        const heartOutline = btnFavorite.querySelector("[data-outline]") as HTMLElement;

        const toggleFavorite = () => {
            const isFavorite = favoritePokemons.some((fav) => fav.name === name);

            if (isFavorite) {
                favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name);
            } else {
                favoritePokemons.push({ name, id:+id });
            }

            localStorage.setItem("favorites", JSON.stringify(favoritePokemons));
        }

        btnFavorite.addEventListener("click", () => {
            heartFill.classList.toggle("hidden");
            heartOutline.classList.toggle("hidden");

            toggleFavorite();
        });

        const isFavorite = favoritePokemons.some((fav) => fav.name === name);

        if (isFavorite) {
            heartFill.classList.remove("hidden");
            heartOutline.classList.add("hidden");
        }
        
    };


    document.addEventListener('astro:page-load', handlePageLoad);


    
</script>